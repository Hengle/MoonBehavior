{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome\n\n\nMoonBehavior is a \nBehaviorTree\n solution for the \nUnity\n game engine. That enables you to make beliveable AI agents and game logic.\n\n\n\n\nMain Features\n\n\nNice visual editor\n\n\nNode based editor inspired in unity's mecanim window easy to use for making your AI's faster !\n\n\nBlackboard Memory\n\n\nAllows you share information between your Behavior Trees and your AI\n\n\nPerception\n\n\nAdd field of view and detect your players with the Perception component !\n\n\nRealtime Debugger\n\n\nAllows you to debug and view your behavior trees execution during playmode trought the Node editor.\n\n\nUnity friendly\n\n\nEverything is saved as a single Scriptable Object asset that makes your nodes and your BT's friendly with unity's serialization system.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome", 
            "text": "MoonBehavior is a  BehaviorTree  solution for the  Unity  game engine. That enables you to make beliveable AI agents and game logic.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#main-features", 
            "text": "", 
            "title": "Main Features"
        }, 
        {
            "location": "/#nice-visual-editor", 
            "text": "Node based editor inspired in unity's mecanim window easy to use for making your AI's faster !", 
            "title": "Nice visual editor"
        }, 
        {
            "location": "/#blackboard-memory", 
            "text": "Allows you share information between your Behavior Trees and your AI", 
            "title": "Blackboard Memory"
        }, 
        {
            "location": "/#perception", 
            "text": "Add field of view and detect your players with the Perception component !", 
            "title": "Perception"
        }, 
        {
            "location": "/#realtime-debugger", 
            "text": "Allows you to debug and view your behavior trees execution during playmode trought the Node editor.", 
            "title": "Realtime Debugger"
        }, 
        {
            "location": "/#unity-friendly", 
            "text": "Everything is saved as a single Scriptable Object asset that makes your nodes and your BT's friendly with unity's serialization system.", 
            "title": "Unity friendly"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Creating BehaviorTree Asset\n\n\nTo Create a new Behavior tree asset, Open the Behvaior editor located on \"Window/MoonBehavior/Editor\"\n\n\n-Click on \"New\" then select \"BehaviorTree\"\n\n\n\n\nA window will display, put the name and hit \"Ok\".\n\n\n\n\nAdding nodes\n\n\nRight click \n \"Add node\" to display the node list\n\n\n\n\nTo add it simply click on the item\n\n\n\n\nSearch filter:\n You can Search by name or by category (the blue label)\n\n\n\n\nMoving nodes\n\n\nYou can move nodes holding left click ..\n\n\n\n\nRecursive move holding Shift + left click.\n\n\n\n\nMulti Selection\n\n\nYou can multi select nodes to move or delete just click and drag the mouse on a empty point inside the grid\n\n\n\n\nConnecting nodes\n\n\nTo connect a node to other just click on the output of source node and click the target node to connect it.\n\n\n\n\nRight click on a empty point on the canvas to clear the source output.\n\n\nRight click on  a node input to clear the connection", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#creating-behaviortree-asset", 
            "text": "To Create a new Behavior tree asset, Open the Behvaior editor located on \"Window/MoonBehavior/Editor\"  -Click on \"New\" then select \"BehaviorTree\"   A window will display, put the name and hit \"Ok\".", 
            "title": "Creating BehaviorTree Asset"
        }, 
        {
            "location": "/getting-started/#adding-nodes", 
            "text": "Right click   \"Add node\" to display the node list   To add it simply click on the item   Search filter:  You can Search by name or by category (the blue label)", 
            "title": "Adding nodes"
        }, 
        {
            "location": "/getting-started/#moving-nodes", 
            "text": "You can move nodes holding left click ..   Recursive move holding Shift + left click.", 
            "title": "Moving nodes"
        }, 
        {
            "location": "/getting-started/#multi-selection", 
            "text": "You can multi select nodes to move or delete just click and drag the mouse on a empty point inside the grid", 
            "title": "Multi Selection"
        }, 
        {
            "location": "/getting-started/#connecting-nodes", 
            "text": "To connect a node to other just click on the output of source node and click the target node to connect it.   Right click on a empty point on the canvas to clear the source output.  Right click on  a node input to clear the connection", 
            "title": "Connecting nodes"
        }, 
        {
            "location": "/node-types/", 
            "text": "MoonBehavior Comes with a lot of default build-in nodes that you can use.\n\n\nIn this page will explain the functionality of basic nodes.\n\n\nSequencer\n\n\n\ngraph LR\n    A[Sequencer]\n    A --> B[Task1]\n    A --> C[Task2]\n    A --> D[Task N]\n\n    style B fill:#54ff00\n    style C fill:#ffd400\n    style A fill:#ffd400\n\n\n\n\nSequencer node executes sequencially every task by order from minor to mayor.\n\n\nReturns SUCCESS when all tasks are successed, FAIL when any task fails, otherwise it will return RUNNING.\n\n\nIt's good for sequencial logic.\n\n\nSelector\n\n\n\ngraph LR\n    A[Selector]\n    A --> B[Task1]\n    A --> C[Task2]\n    style B fill:#ed4444\n    style C fill:#ffd400\n    style A fill:#ffd400\n\n\n\n\nSelector Executes task sequencially (like sequencer) but it will not execute to the next task until the current task fails.\n\n\nReturns SUCCESS if the current task are successed , RUNNING if the current task are running , and FAILURE if all the childs tasks fails or it has no childs.\n\n\nOptions\n\n\n\n\nRandomize:\n If enabled it will sort and executes the childs Ramdomly.\n\n\n\n\nIt's good for IF-ELSE Sequences\n\n\nRandom Selector\n\n\n\ngraph LR\n    A[Random Selector]\n    A --> B[Task1]\n    A --> C[Task2]\n    A --> D[Task3]\n    A --> E[Task N]\n    style D fill:#ffd400\n    style A fill:#ffd400\n\n\n\n\nRandom selector\n\n\nWorks like selector but select it's childs based on the priority of every child node, mayor priority means more selection probability. \n\n\nRepeater\n\n\n\ngraph LR\n    A[Repeater]\n    A --> B[Task1]\n    style B fill:#ffd400\n    style A fill:#ffd400\n\n\n\n\nRepeats a child Task every tick.\n\n\nOptions\n\n\n\n\nRepeat until:\n Repeat mode: SUCCESS; Repeats until the child node returns Success, FAILURE; Repeats until the child node retunrs Failure, \nFOREVER; Repeats forever.\n\n\n\n\nReturns Success When the repeat condition fails, otherwise returns running\n\n\nit's good for continuos executions.\n\n\nIterator\n\n\n\ngraph LR\n    A[Iterator]\n    A --> B[Task1]\n    style B fill:#ffd400\n    style A fill:#ffd400\n\n\n\n\nRepeats a child task every tick (like Repeater) but with a limited repeat count.\n\n\nOptions\n\n\n\n\nRepeat count:\n Maximun child repetitions.\n\n\n\n\nReturns SUCCESS when repetitions are finished, otherwise returns RUNNING.\n\n\nParallel\n\n\n\ngraph LR\n    A[Parallel]\n    A --> B[Task1]\n    A --> C[Task2]\n    A --> D[Task3]\n    A --> E[Task N]\n    style A fill:#ffd400\n    style B fill:#ffd400\n    style C fill:#ffd400\n    style D fill:#ffd400\n    style E fill:#ffd400\n\n\n\n\nExecutes all childs simultaneously every tick\n\n\nReturns RUNNING.\n\n\nInverter\n\n\n\ngraph LR\n    A[Inverter]\n    A --> B[Task1]\n    style B fill:#54ff00\n    style A fill:#ed4444\n\n\n\n\nLike ! Operator Returns the invert result of it's child Task.\n\n\nSUCCESS becomes FAILURE\n\n\nFAILURE becomes SUCCESS.", 
            "title": "Node Types"
        }, 
        {
            "location": "/node-types/#sequencer", 
            "text": "graph LR\n    A[Sequencer]\n    A --> B[Task1]\n    A --> C[Task2]\n    A --> D[Task N]\n\n    style B fill:#54ff00\n    style C fill:#ffd400\n    style A fill:#ffd400  Sequencer node executes sequencially every task by order from minor to mayor.  Returns SUCCESS when all tasks are successed, FAIL when any task fails, otherwise it will return RUNNING.  It's good for sequencial logic.", 
            "title": "Sequencer"
        }, 
        {
            "location": "/node-types/#selector", 
            "text": "graph LR\n    A[Selector]\n    A --> B[Task1]\n    A --> C[Task2]\n    style B fill:#ed4444\n    style C fill:#ffd400\n    style A fill:#ffd400  Selector Executes task sequencially (like sequencer) but it will not execute to the next task until the current task fails.  Returns SUCCESS if the current task are successed , RUNNING if the current task are running , and FAILURE if all the childs tasks fails or it has no childs.  Options   Randomize:  If enabled it will sort and executes the childs Ramdomly.   It's good for IF-ELSE Sequences", 
            "title": "Selector"
        }, 
        {
            "location": "/node-types/#random-selector", 
            "text": "graph LR\n    A[Random Selector]\n    A --> B[Task1]\n    A --> C[Task2]\n    A --> D[Task3]\n    A --> E[Task N]\n    style D fill:#ffd400\n    style A fill:#ffd400  Random selector  Works like selector but select it's childs based on the priority of every child node, mayor priority means more selection probability.", 
            "title": "Random Selector"
        }, 
        {
            "location": "/node-types/#repeater", 
            "text": "graph LR\n    A[Repeater]\n    A --> B[Task1]\n    style B fill:#ffd400\n    style A fill:#ffd400  Repeats a child Task every tick.  Options   Repeat until:  Repeat mode: SUCCESS; Repeats until the child node returns Success, FAILURE; Repeats until the child node retunrs Failure, \nFOREVER; Repeats forever.   Returns Success When the repeat condition fails, otherwise returns running  it's good for continuos executions.", 
            "title": "Repeater"
        }, 
        {
            "location": "/node-types/#iterator", 
            "text": "graph LR\n    A[Iterator]\n    A --> B[Task1]\n    style B fill:#ffd400\n    style A fill:#ffd400  Repeats a child task every tick (like Repeater) but with a limited repeat count.  Options   Repeat count:  Maximun child repetitions.   Returns SUCCESS when repetitions are finished, otherwise returns RUNNING.", 
            "title": "Iterator"
        }, 
        {
            "location": "/node-types/#parallel", 
            "text": "graph LR\n    A[Parallel]\n    A --> B[Task1]\n    A --> C[Task2]\n    A --> D[Task3]\n    A --> E[Task N]\n    style A fill:#ffd400\n    style B fill:#ffd400\n    style C fill:#ffd400\n    style D fill:#ffd400\n    style E fill:#ffd400  Executes all childs simultaneously every tick  Returns RUNNING.", 
            "title": "Parallel"
        }, 
        {
            "location": "/node-types/#inverter", 
            "text": "graph LR\n    A[Inverter]\n    A --> B[Task1]\n    style B fill:#54ff00\n    style A fill:#ed4444  Like ! Operator Returns the invert result of it's child Task.  SUCCESS becomes FAILURE  FAILURE becomes SUCCESS.", 
            "title": "Inverter"
        }, 
        {
            "location": "/using-memory/", 
            "text": "AI memory allows you to store some information between the BehaviorTree and the AI agent\n\n\nThe AI memory stores every element as object type that means that you can store on the memory almost every data type (via script).\n\n\nAdding elements\n\n\n\n\n C# API: \n\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    private void Start()\n    {\n        ai.Memory.SetValue(\nPlayerHealth\n, 100.0f);\n        ai.Memory.SetValue(\nPlayerLives\n, 3);\n    }\n}\n\n\n\n\nRemoving elements\n\n\nTo remove elements in the inspector it's just clicking on the (-) buttun and it will remove the selected item.\n\n\n\n\n C# API: \n\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    private void Start()\n    {\n        ai.Memory.RemoveValue(\nPlayerHealth\n);\n    }\n}\n\n\n\n\nGet values\n\n\n C# API: \n\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    private void Start()\n    {\n        float Power = ai.Memory.GetValue\nfloat\n(\nShootPower\n);\n    }\n}\n\n\n\n\nGet values with MemoryItem:\n\n\nAllows support of constant and memory-based values (memory keys) of different data types inside unity's inspector.  That enables getting values without need to manually check if the value is a constant or memory value.\n\n\n\n\nNOTE: it actually doesn't support array.\n\n\n\n\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\nusing MoonBehavior.Memory;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    public MemoryItem Attack = new MemoryItem(ItemType.FLOAT);\n    private void Start()\n    {\n        float attack = Attack.GetValue\nfloat\n(ai.Memory);\n    }\n}\n\n\n\n\n\nClear Memory\n\n\nTo clear the memory Simply call The \nClear()\n Method\n\n\n\n\nIt will kill all the AI memory, so be careful about destroying the memory data.\n\n\n\n\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\nusing MoonBehavior.Memory;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    private void Start()\n    {\n        ai.Memory.Clear();\n    }\n}\n\n\n\n\n\nSave \n Load\n\n\nSaving and loading data allows you to keep in HDD / RAM the AI's Memory.\n\n\nIt will return an byte array and you can save it later to a file and loaing it again.\n\n\n\n\nNote:\n the serialization and des-serialization can be \nslow\n because it encrypts and decrypts the information to return safe data.\n\n\nDoesn't support UnityObject-derived (UnityEngine.Object) data types because it's not safe at serialization\n\n\n\n\nSaving\n\n\nTo save from memory call : Save()\n\n\nExample saving data:\n\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    private void Start()\n    {\n        // Push some data to the memory\n        for (int i = 0; i \n 100; i++)\n        {\n            ai.Memory.SetValue(i.ToString(), i + (Random.value * i));\n        }\n\n        // Save the memory data to ram\n        byte[] SavedData = ai.Memory.Save();\n\n        // save the memory to disc\n        File.WriteAllBytes(Application.dataPath + \n/Memory.txt\n, SavedData);\n    }\n}\n\n\n\n\nLoading\n\n\nTo load from memory call : Load(byte[] Data , bool clear = false)\n\n\n\n\nData: byte array of the previusly saved data.\n\n\nclear: Should clear memory before load ?\n\n\n\n\nExample loading data:\n\n\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    public TextAsset txt;\n\n    private void Start()\n    {\n        ai.Memory.Load(txt.bytes);\n    }\n}", 
            "title": "Using Memory"
        }, 
        {
            "location": "/using-memory/#adding-elements", 
            "text": "C# API:   using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    private void Start()\n    {\n        ai.Memory.SetValue( PlayerHealth , 100.0f);\n        ai.Memory.SetValue( PlayerLives , 3);\n    }\n}", 
            "title": "Adding elements"
        }, 
        {
            "location": "/using-memory/#removing-elements", 
            "text": "To remove elements in the inspector it's just clicking on the (-) buttun and it will remove the selected item.    C# API:   using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    private void Start()\n    {\n        ai.Memory.RemoveValue( PlayerHealth );\n    }\n}", 
            "title": "Removing elements"
        }, 
        {
            "location": "/using-memory/#get-values", 
            "text": "C# API:   using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    private void Start()\n    {\n        float Power = ai.Memory.GetValue float ( ShootPower );\n    }\n}  Get values with MemoryItem:  Allows support of constant and memory-based values (memory keys) of different data types inside unity's inspector.  That enables getting values without need to manually check if the value is a constant or memory value.   NOTE: it actually doesn't support array.   \nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\nusing MoonBehavior.Memory;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    public MemoryItem Attack = new MemoryItem(ItemType.FLOAT);\n    private void Start()\n    {\n        float attack = Attack.GetValue float (ai.Memory);\n    }\n}", 
            "title": "Get values"
        }, 
        {
            "location": "/using-memory/#clear-memory", 
            "text": "To clear the memory Simply call The  Clear()  Method   It will kill all the AI memory, so be careful about destroying the memory data.   \nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\nusing MoonBehavior.Memory;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    private void Start()\n    {\n        ai.Memory.Clear();\n    }\n}", 
            "title": "Clear Memory"
        }, 
        {
            "location": "/using-memory/#save-load", 
            "text": "Saving and loading data allows you to keep in HDD / RAM the AI's Memory.  It will return an byte array and you can save it later to a file and loaing it again.   Note:  the serialization and des-serialization can be  slow  because it encrypts and decrypts the information to return safe data.  Doesn't support UnityObject-derived (UnityEngine.Object) data types because it's not safe at serialization   Saving  To save from memory call : Save()  Example saving data:  using System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    private void Start()\n    {\n        // Push some data to the memory\n        for (int i = 0; i   100; i++)\n        {\n            ai.Memory.SetValue(i.ToString(), i + (Random.value * i));\n        }\n\n        // Save the memory data to ram\n        byte[] SavedData = ai.Memory.Save();\n\n        // save the memory to disc\n        File.WriteAllBytes(Application.dataPath +  /Memory.txt , SavedData);\n    }\n}  Loading  To load from memory call : Load(byte[] Data , bool clear = false)   Data: byte array of the previusly saved data.  clear: Should clear memory before load ?   Example loading data:  using UnityEngine;\nusing MoonBehavior.BehaviorTrees;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    public TextAsset txt;\n\n    private void Start()\n    {\n        ai.Memory.Load(txt.bytes);\n    }\n}", 
            "title": "Save &amp; Load"
        }, 
        {
            "location": "/custom-nodes/", 
            "text": "Custom Tasks allows you to put custom actions and logic , interacting with your game code and much more.\n\n\nCreating a custom action\n\n\n1- On en empty point on graph right click and over 'Create'\n\n\n\n\nthen select the type of node that you want to create.\n\n\n2- Set the name and select the type, then hit 'Create'\n\n\n\n\n3- Then your script editor should open the file\n\n\n\n\nThe files are default saved to:\n Assets/MoonBehavior/Actions/BehaviorTrees\n\n\n\n\nActions\n\n\nCustom actions are functionality that the AI executes. ( eg: Move , Destroying , Animating..)\n\n\nthe default layout for a custom action are:\n\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\n\npublic class MyCustomAction : Task\n{\n    public override TaskResult OnExecute(MoonAI ai)\n    {\n\n        return TaskResult.Success;\n    }\n}\n\n\n\n\n\nYou must return an state (FAILURE , SUCCESS , RUNNING ) depending on what you are doing..\n\n\n\n\nThe custom Action Class must derived from \nTask\n. \n\n\n\n\nDecisions\n\n\nDecisions are actions that executes other actions as childs.\n\n\nthe default layout for decision are the similar as Actions but it has the \nChilds\n Property:\n\n\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\n\npublic class MyCustomDecision : Decision\n{\n    // Called when the task is executed\n    public override TaskResult OnExecute(MoonAI ai)\n    {\n\n        for (int i = 0; i \n Childs.Length; i++)\n        {\n            TaskResult result = Childs[i].Execute(ai);\n            if (result == TaskResult.Failure)\n                return result;\n        }\n\n        return TaskResult.Success;\n    }\n}\n\n\n\n\n\n\n\nThe custom Decision class must derived from \nDecision\n. \n\n\n\n\nSingleChildAttribute\n\n\nAttribute used for limiting a decision to have only 1 child.\n\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\n\n[SingleChild]\npublic class MyCustomDecision : Decision\n{\n    // Called when the task is executed\n    public override TaskResult OnExecute(MoonAI ai)\n    {\n\n        if (Childs.Length \n 0)\n            return Childs[0].Execute(ai);\n\n        return TaskResult.Success;\n    }\n}\n\n\n\n\nAdding extra info to your actions\n\n\nYou can add extra information to your action trought InfoAttribute.\n \nYou can override propertys:\n\n\nName\n Display node name\n\n\nCategory\n Node category \n\n\nDescription\n Node description in the inspector", 
            "title": "Creating custom actions"
        }, 
        {
            "location": "/custom-nodes/#creating-a-custom-action", 
            "text": "1- On en empty point on graph right click and over 'Create'   then select the type of node that you want to create.  2- Set the name and select the type, then hit 'Create'   3- Then your script editor should open the file   The files are default saved to:  Assets/MoonBehavior/Actions/BehaviorTrees", 
            "title": "Creating a custom action"
        }, 
        {
            "location": "/custom-nodes/#actions", 
            "text": "Custom actions are functionality that the AI executes. ( eg: Move , Destroying , Animating..)  the default layout for a custom action are:  using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\n\npublic class MyCustomAction : Task\n{\n    public override TaskResult OnExecute(MoonAI ai)\n    {\n\n        return TaskResult.Success;\n    }\n}  You must return an state (FAILURE , SUCCESS , RUNNING ) depending on what you are doing..   The custom Action Class must derived from  Task .", 
            "title": "Actions"
        }, 
        {
            "location": "/custom-nodes/#decisions", 
            "text": "Decisions are actions that executes other actions as childs.  the default layout for decision are the similar as Actions but it has the  Childs  Property:  \nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\n\npublic class MyCustomDecision : Decision\n{\n    // Called when the task is executed\n    public override TaskResult OnExecute(MoonAI ai)\n    {\n\n        for (int i = 0; i   Childs.Length; i++)\n        {\n            TaskResult result = Childs[i].Execute(ai);\n            if (result == TaskResult.Failure)\n                return result;\n        }\n\n        return TaskResult.Success;\n    }\n}   The custom Decision class must derived from  Decision .", 
            "title": "Decisions"
        }, 
        {
            "location": "/custom-nodes/#singlechildattribute", 
            "text": "Attribute used for limiting a decision to have only 1 child.  using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.BehaviorTrees;\n\n[SingleChild]\npublic class MyCustomDecision : Decision\n{\n    // Called when the task is executed\n    public override TaskResult OnExecute(MoonAI ai)\n    {\n\n        if (Childs.Length   0)\n            return Childs[0].Execute(ai);\n\n        return TaskResult.Success;\n    }\n}", 
            "title": "SingleChildAttribute"
        }, 
        {
            "location": "/custom-nodes/#adding-extra-info-to-your-actions", 
            "text": "You can add extra information to your action trought InfoAttribute.  \nYou can override propertys:  Name  Display node name  Category  Node category   Description  Node description in the inspector", 
            "title": "Adding extra info to your actions"
        }
    ]
}